/*
 * main.c
 * Main program for TIVA MCU - Experiment 6.2.4
 * Stepper Motor Interfaces
 *
 * Station 13
 * Lab Team:
 * Emmanuel Ramos
 * Reynaldo Belfort
 *
 *
 *
 *
 *
 */

// Stepper motor driver pins: E4, E3, E2, E1 (orange, yellow, pink, blue)

//Pseudocode:

//MCU initializaion

//------Main loop------
//LOOP:
	//if sequenceCounter + 1 < 4
		//Set portA pins to fullStepLUT[sequenceCounter]
		//sequenceCounter++
		//Delay 10ms


#include <stdint.h>
#include <stdbool.h>
#include "inc/tm4c123gh6pm.h"
#include "inc/hw_types.h"
#include "inc/hw_memmap.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/debug.h"
#include "driverlib/pwm.h"
#include "driverlib/pin_map.h"
#include "inc/hw_gpio.h"
//#include "tivaUtils.h"

#define CLOCK_FREQ 40

//Stepper motor characteristics
#define FULL_STEP_ANGLE 11.25
#define HALF_STEP_ANGLE 5.625

uint8_t stepCounter = 0;
//uint8_t sequenceCounter = 0;
uint8_t fullStepLUT[4] = {16, 8, 4, 2};
uint8_t halfStepLUT[8] = {16, 24, 8, 12, 4, 6, 2, 18};

//Function declarations
uint32_t computeDelayCount(uint32_t, uint8_t);
void performStep(bool);
void spinStepper(uint16_t, bool){

int main(void) {

    //----MCU Initialization----
    SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN); //Set-up the clocking of the MCU to 40MHz

    //--Prepare peripherals (Stepper Motor)----
  	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);  // E1,E2,E3,E4 for Stepper Motor pins

    //Set (Stepper Motor) port pins as outputs
    GPIOPinTypeGPIOOutput(GPIO_PORTE_BASE, GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1);

  	//Main loop
    while(1){

		 if(stepCounter < (32 * 4)){
			 performStep(true);
			 stepCounter++;
		 }

    }
}

void spinStepper(uint16_t angle, bool rightDirection, bool fullStep){
//32 = 90 degrees

	uint32_t amountSteps = 0;
	uint32_t stepCounter = 0;
	//Perform angle -> # step conversion
	amountSteps = fullStep ? angle / FULL_STEP_ANGLE : angle / HALF_STEP_ANGLE;

	//We perform a correction multiplying by 4 because we take into consideration that 32steps equals to a 90 degree rotation
	for(;stepCounter < amountSteps * 4; stepCounter++){
		performStep(fullStep, rightDirection);
	}
}


void performStep(bool fullStep, bool rightDirection)
{

	uint8_t sequenceCounter = 0;

	if(fullStep){// Do one Full step sequence

		if(rightDirection){
			sequenceCounter = 3;
			for(;sequenceCounter >= 0; sequenceCounter--)
			{
				GPIOPinWrite(GPIO_PORTE_BASE, GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1, fullStepLUT[sequenceCounter]);
				SysCtlDelay(computeDelayCount(10, CLOCK_FREQ)); //Stand-by
			}
		}
		else{
			for(;sequenceCounter <= 3; sequenceCounter++)
			{
				GPIOPinWrite(GPIO_PORTE_BASE, GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1, fullStepLUT[sequenceCounter]);
				SysCtlDelay(computeDelayCount(10, CLOCK_FREQ)); //Stand-by
			}
		}

	}
	else
	{
		if(rightDirection){ // Do one Half step sequence

			sequenceCounter = 7;
			for(;sequenceCounter >= 0; sequenceCounter--)
			{
				GPIOPinWrite(GPIO_PORTE_BASE, GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1, halfStepLUT[sequenceCounter]);
				SysCtlDelay(computeDelayCount(10, CLOCK_FREQ)); //Stand-by
			}
		}
		else
		{
			for(;sequenceCounter <= 7; sequenceCounter++)
			{
				GPIOPinWrite(GPIO_PORTE_BASE, GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1, halfStepLUT[sequenceCounter]);
				SysCtlDelay(computeDelayCount(10, CLOCK_FREQ)); //Stand-by
			}
		}
	}
}

uint32_t computeDelayCount(uint32_t waitTime, uint8_t clockFreq){
	return 0.3333333 * (clockFreq*1000000) * (waitTime * 0.001);
}



