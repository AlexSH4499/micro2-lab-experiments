/*
 * main.c
 * Main program for TIVA MCU - Experiment 6.3.1
 * Complementary Task: Stepper Motor Characterization
 *
 * Station 13
 * Lab Team:
 * Emmanuel Ramos
 * Reynaldo Belfort
 *
 *
 * Start program with initial condition Stop Free
 * While true:
 *  If interrupt:
 *      if PB1 && speedInd != 0, Decrease speedInd by one
 *      else if PB2 && speedInd != 9 , Increase speedInd by one
 *      else if PB3, XOR playSignal
 *
 *
 */

#include <stdint.h>
#include <stdbool.h>
#include "inc/tm4c123gh6pm.h"
#include "inc/hw_types.h"
#include "inc/hw_memmap.h"
#include "driverlib/interrupt.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/debug.h"
#include "driverlib/pwm.h"
#include "driverlib/pin_map.h"
#include "inc/hw_gpio.h"
#include "driverlib/rom.h"
#include "customLibs/MIL_LCD_lib.h"

#define CLOCK_FREQ 40

//Stepper motor characteristics
#define FULL_STEP_ANGLE 11.25
#define HALF_STEP_ANGLE 5.625
#define DELAY_PER_SEQSTEP 10 // Miliseconds per sequence for a full step or half step

/*
 * The code assumes the following pin configuration (7-0 bits)
 * 7  6  5  4  3  2  1  0
 * D7,D6,D5,D4,D3,D2,D1,D0 - port B GPIOs - Data Port
 * RS,R/W,E                    - port A GPIOs - Control Port
 */

uint8_t fullStepLUT[4] = {16, 8, 4, 2};
uint8_t halfStepLUT[8] = {16, 24, 8, 12, 4, 6, 2, 18};
float speedSelect[10] = {100, 50, 20, 10, 5, 2, 1, 0.5, 0.2, 0.1};    //speed LUT
int linePos; // Current line position on LCD, 0 = Top, 1 = Bot
int perInd = 0; // period index
int currentAction = 1;// Flag for current Action of DC Motor.(1=Stop Free, 2=Rot.Left,3=Rot.Right)
int pButton = 0;  // flag for PB that interrupted
int PUSH_FLAG = 0;   // flag to set if interrupted
bool playSig = false;  //Start/Stop motor turn signal

//Software Function declarations
void PB1_IntHandler();  // interrupt handler for columns port C pins 4,5,6
void writeSpeedAction(void); // writes to LCD current speed and action taken
void toggleTurnSignal();   // manages the current action and sets/unsets PWM functionality

//Motor Function declarations
uint32_t computeDelayCountMicrosec(float, uint8_t);
void performStep(bool, bool, float);
void spinStepper(uint16_t, bool, bool, float);

int main(void) {

    //----MCU Initialization----

    SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN); //Set-up the clocking of the MCU to 40MHz

    //--Prepare peripherals (LCD)----
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);  // Enable, RS and R/W port for LCD Display, Push buttons
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);  // Data port for LCD display

    //--Prepare peripherals (Stepper Motor)----
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);  // E1,E2,E3,E4 for Stepper Motor pins

    //Set (LCD) port pins as outputs
    GPIOPinTypeGPIOOutput(GPIO_PORTA_BASE, GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5);
    GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE, ENTIRE_PORT);

    //Set (Stepper Motor) port pins as outputs
    GPIOPinTypeGPIOOutput(GPIO_PORTE_BASE, GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1);

    // Set (Push Buttons) Port A pins as inputs PIN 2 = Left(Down) PB(1), PIN 3 = Middle (UP)PB(2), PIN 4 = Right(Stop/Play) PB(3)
    GPIOPinTypeGPIOInput(GPIO_PORTA_BASE, GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2);
    GPIOIntRegister(GPIO_PORTA_BASE, PB1_IntHandler);
    // Set PB's to activate after it has been released
    GPIOIntTypeSet(GPIO_PORTA_BASE, GPIO_PIN_2, GPIO_RISING_EDGE); // Set PB1 to rising edge
    GPIOIntTypeSet(GPIO_PORTA_BASE, GPIO_PIN_4|GPIO_PIN_3, GPIO_FALLING_EDGE);  // Set PB2/3 to falling edge

    //Setup the LCD
    initializeLCD();

    writeSpeedAction();// write current action to LCD
    GPIOIntEnable(GPIO_PORTA_BASE, GPIO_PIN_2|GPIO_PIN_3| GPIO_PIN_4);  //enable interrupts
    //Main loop
    while(1){


        if(playSig){
            spinStepper(720, true, false, speedSelect[perInd]); // full step; left direction

        }
        if(PUSH_FLAG == 1){//interrupted?
            PUSH_FLAG=0;   //unset interrupt flag

            if(pButton == 4 && perInd > 0){//PB 1(Down) Pressed?
                perInd--; // decrease period index
                writeSpeedAction();// write current action to LCD

            }else if(pButton == 8 && perInd < 9){ // PB 2 (Up)Pressed?
                perInd++; // period speed index
                writeSpeedAction();// write current action to LCD


            }else if(pButton == 16){  // PB3 Pressed?

            }
            pButton = 0;
        }
    }
}

// Handles the interrupt for the push button
void PB1_IntHandler(void)
{
    SysCtlDelay(4000000);  //for debouncing
    pButton = GPIOIntStatus(GPIO_PORTA_BASE,true);  // get button that interrupted

    if(pButton == 16){  // if PB 3 : toogle the turn signal
    	writeSpeedAction();  // write to LCD
    	toggleTurnSignal();
    }
    else
    {
    	PUSH_FLAG = 1; // set interrupt flag
    }

    GPIOIntClear (GPIO_PORTA_BASE, GPIO_PIN_4| GPIO_PIN_3 | GPIO_PIN_2);   // pin 4= PB3, pin3=PB2, pin2=PB1
}

// Writes the current speed and action to LCD
void writeSpeedAction(void){
    clearLCD();     //clear the LCD
    switch(playSig){
    case false:
        writeMessage("Stop", 4);// write current action to LCD
        break;
    case true:
        writeMessage("Play", 4);// write current action to LCD
        break;
    default :
        break;
    }
    setCursorPosition(0x40);    // move to bottom line of LCD
    switch(perInd){
    case 0:
        writeMessage("Period: 100ms", 13);// write current action to LCD
        break;
    case 1:
        writeMessage("Period: 050ms", 13);// write current action to LCD
        break;
    case 2:
        writeMessage("Period: 020ms", 13);// write current action to LCD
        break;
    case 3:
        writeMessage("Period: 010ms", 13);// write current action to LCD
        break;
    case 4:
        writeMessage("Period: 005ms", 13);// write current action to LCD
        break;
    case 5:
        writeMessage("Period: 002ms", 13);// write current action to LCD
        break;
    case 6:
        writeMessage("Period: 001ms", 13);// write current action to LCD
        break;
    case 7:
        writeMessage("Period: 0.5ms", 13);// write current action to LCD
        break;
    case 8:
        writeMessage("Period: 0.2ms", 13);// write current action to LCD
        break;
    case 9:
        writeMessage("Period: 0.1ms", 13);// write current action to LCD
        break;
    default :
        break;
    }
}

// Sets Current Action(Play/Stop)
void toggleTurnSignal(){
    if(playSig){  // if last action was done, go to first one
        playSig = false;
    }else{
        playSig = true;
    }
}


// ----Motor Functions------
void spinStepper(uint16_t angle, bool rightDirection, bool fullStep, float millisPerStep){
    //32 = 90 degrees

    int amountSteps = 0;
    int stepCounter = 0;
    //Perform angle -> # step conversion
    amountSteps = fullStep ? angle / FULL_STEP_ANGLE : angle / HALF_STEP_ANGLE;

    //We perform a correction multiplying by 4 because we take into consideration that 32steps equals to a 90 degree rotation
    for(;stepCounter < amountSteps * 4; stepCounter++){
        //Safety Check
        if(playSig){
            performStep(fullStep, rightDirection, millisPerStep);
        }else{
            return;
        }
    }
    toggleTurnSignal();
}


void performStep(bool fullStep, bool rightDirection, float millisPerStep)
{
    int sequenceCounter = 0;

    if(fullStep){// Do one Full step sequence

        if(rightDirection){
            sequenceCounter = 3;
            for(;sequenceCounter >= 0; sequenceCounter--)
            {
                GPIOPinWrite(GPIO_PORTE_BASE, GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1, fullStepLUT[sequenceCounter]);
                SysCtlDelay(computeDelayCountMicrosec(millisPerStep / 4, CLOCK_FREQ)); //Stand-by. The duration of the step is subdivided it 4 (since 4  iterations per step)
            }
        }
        else{
            for(;sequenceCounter <= 3; sequenceCounter++)
            {
                GPIOPinWrite(GPIO_PORTE_BASE, GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1, fullStepLUT[sequenceCounter]);
                SysCtlDelay(computeDelayCountMicrosec(millisPerStep / 4, CLOCK_FREQ)); //Stand-by
            }
        }

    }
    else
    {
        if(rightDirection){ // Do one Half step sequence

            sequenceCounter = 7;
            for(;sequenceCounter >= 0; sequenceCounter--)
            {
                GPIOPinWrite(GPIO_PORTE_BASE, GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1, halfStepLUT[sequenceCounter]);
                SysCtlDelay(computeDelayCountMicrosec(millisPerStep / 8, CLOCK_FREQ)); //Stand-by
            }
        }
        else
        {
            for(;sequenceCounter <= 7; sequenceCounter++)
            {
                GPIOPinWrite(GPIO_PORTE_BASE, GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1, halfStepLUT[sequenceCounter]);
                SysCtlDelay(computeDelayCountMicrosec(millisPerStep / 8, CLOCK_FREQ)); //Stand-by
            }
        }
    }
}

//waitTime in milliseconds
uint32_t computeDelayCountMicrosec(float waitTime, uint8_t clockFreq){
    return 0.3333333 * (clockFreq*1000000) * (waitTime * 0.001);
}

