#include <stdint.h>
#include <stdbool.h>
#include "inc/tm4c123gh6pm.h"
#include "inc/hw_types.h"
#include "inc/hw_memmap.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/debug.h"
#include "driverlib/pwm.h"
#include "driverlib/pin_map.h"
#include "inc/hw_gpio.h"
//#include "tivaUtils.h"

#define CLOCK_FREQ 40

//Stepper motor characteristics
#define FULL_STEP_ANGLE 11.25
#define HALF_STEP_ANGLE 5.625
#define DELAY_PER_SEQSTEP 10 // Miliseconds per sequence for a full step or half step

uint8_t stepCounter = 0;
//uint8_t sequenceCounter = 0;
uint8_t fullStepLUT[4] = {16, 8, 4, 2};
uint8_t halfStepLUT[8] = {16, 24, 8, 12, 4, 6, 2, 18};

//Function declarations
uint32_t computeDelayCount(float, uint8_t);
void performStep(bool, bool, float);
void spinStepper(uint16_t, bool, bool, float);

int main(void) {

    //----MCU Initialization----
    SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN); //Set-up the clocking of the MCU to 40MHz

    //--Prepare peripherals (Stepper Motor)----
  	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);  // E1,E2,E3,E4 for Stepper Motor pins

    //Set (Stepper Motor) port pins as outputs
    GPIOPinTypeGPIOOutput(GPIO_PORTE_BASE, GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1);

//	//Perform stepper rotations
//	spinStepper(270, false, true); //Left direction, full step
//	SysCtlDelay(computeDelayCount(300, CLOCK_FREQ));
//	spinStepper(180, false, true); //Left direction, full step
//	SysCtlDelay(computeDelayCount(300, CLOCK_FREQ));
//	spinStepper(90, true, true); //Right direction, full step

  	//Main loop
    while(1){

    	performStep(true, false, 100); // full step; left direction
//		 //Perform a 360 degree rotation
//		 if(stepCounter < (32 * 4)){
//			 performStep(true);
//			 stepCounter++;
//		 }
    }
}

void spinStepper(uint16_t angle, bool rightDirection, bool fullStep, float millisPerStep){
//32 = 90 degrees

	int amountSteps = 0;
	int stepCounter = 0;
	//Perform angle -> # step conversion
	amountSteps = fullStep ? angle / FULL_STEP_ANGLE : angle / HALF_STEP_ANGLE;

	//We perform a correction multiplying by 4 because we take into consideration that 32steps equals to a 90 degree rotation
	for(;stepCounter < amountSteps * 4; stepCounter++){
		performStep(fullStep, rightDirection, millisPerStep);
	}
}


void performStep(bool fullStep, bool rightDirection, float millisPerStep)
{
	int sequenceCounter = 0;

	if(fullStep){// Do one Full step sequence

		if(rightDirection){
			sequenceCounter = 3;
			for(;sequenceCounter >= 0; sequenceCounter--)
			{
				GPIOPinWrite(GPIO_PORTE_BASE, GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1, fullStepLUT[sequenceCounter]);
				SysCtlDelay(computeDelayCount(millisPerStep / 4, CLOCK_FREQ)); //Stand-by. The duration of the step is subdivided it 4 (since 4  iterations per step)
			}
		}
		else{
			for(;sequenceCounter <= 3; sequenceCounter++)
			{
				GPIOPinWrite(GPIO_PORTE_BASE, GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1, fullStepLUT[sequenceCounter]);
				SysCtlDelay(computeDelayCount(millisPerStep / 4, CLOCK_FREQ)); //Stand-by
			}
		}

	}
	else
	{
		if(rightDirection){ // Do one Half step sequence

			sequenceCounter = 7;
			for(;sequenceCounter >= 0; sequenceCounter--)
			{
				GPIOPinWrite(GPIO_PORTE_BASE, GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1, halfStepLUT[sequenceCounter]);
				SysCtlDelay(computeDelayCount(millisPerStep / 8, CLOCK_FREQ)); //Stand-by
			}
		}
		else
		{
			for(;sequenceCounter <= 7; sequenceCounter++)
			{
				GPIOPinWrite(GPIO_PORTE_BASE, GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1, halfStepLUT[sequenceCounter]);
				SysCtlDelay(computeDelayCount(millisPerStep / 8, CLOCK_FREQ)); //Stand-by
			}
		}
	}
}

//waitTime in milliseconds
uint32_t computeDelayCountMicrosec(float waitTime, uint8_t clockFreq){
	return 0.3333333 * (clockFreq*1000000) * (waitTime * 0.001);
}
